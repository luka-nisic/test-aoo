name: Finall

# This workflow runs when any of the following occur:
# - A push is made to a branch called `main` or `seed`
# - A tag starting with "v" is created
# - A pull request is created or updated
on:
  push:
    branches:
      - main
      - seed
    tags:
      - v*
  pull_request:
  workflow_dispatch:
    inputs:
      version:
        description: 'Specify the release version (e.g., v1.0.0)'
        required: true
        default: 'dev'

env:
  IMAGE_NAME: ghtoken_product_demo  # Change this to your desired image name.

jobs:
  # This job builds and pushes the Docker image.
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Python (if needed for your application)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Install dependencies (skip if not using Python)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Set Version, Git SHA, and Build Time
      - name: Set Version, Git SHA, and Build Time
        id: vars
        run: |
          VERSION=${{ github.event.inputs.version }}
          GIT_SHA=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          echo "APP_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "GIT_SHA=${GIT_SHA}" >> $GITHUB_ENV
          echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV

      # Build Docker image with versioning info
      - name: Build Docker Image
        run: |
          docker build \
            --build-arg APP_VERSION=${{ env.APP_VERSION }} \
            --build-arg GIT_SHA=${{ env.GIT_SHA }} \
            --build-arg BUILD_TIME=${{ env.BUILD_TIME }} \
            -f Dockerfile \
            --tag $IMAGE_NAME \
            --label "runnumber=${GITHUB_RUN_ID}" .

      # Log in to GitHub Container Registry (GHCR) using GITHUB_TOKEN
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.TOKEN2 }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Push Docker Image to GitHub Container Registry
      - name: Tag and Push Docker Image to GHCR
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Ensure the IMAGE_ID is lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Get the version tag.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Remove the "v" prefix from tags (e.g., v1.0.0 becomes 1.0.0).
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Tag as "latest" if version is "main".
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  release:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Create GitHub Release
      - name: Create GitHub Release
        run: |
          gh release create ${{ env.APP_VERSION }} --title "Release ${{ env.APP_VERSION }}" --notes "Release notes for version ${{ env.APP_VERSION }}"

      # Tag and push the release version to GitHub
      - name: Tag and Push Release Version to GitHub
        run: |
          git tag ${{ env.APP_VERSION }}
          git push origin ${{ env.APP_VERSION }}
